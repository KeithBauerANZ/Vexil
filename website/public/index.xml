<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vexil</title>
    <link>http://unsignedapps.github.io/Vexil/</link>
    <description>Recent content on Vexil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://unsignedapps.github.io/Vexil/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating Custom Flag Value Sources</title>
      <link>http://unsignedapps.github.io/Vexil/guides/custom-sources/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/custom-sources/</guid>
      <description>This guide will walk through the basics in creating a custom FlagValueSource, using the bundled sources as examples.
The simplest source Because a FlagValueSource is effectively a plain key-value dictionary, the simplest source is exactly that: a Dictionary&amp;lt;String, Any&amp;gt;.
There are the two methods from the protocol you need to implement: func flagValue&amp;lt;Value&amp;gt; (key: String) -&amp;gt; Value? and func setFlagValue&amp;lt;Value&amp;gt; (_ value: Value?, key: String) throws.
class FlagValueDictionary: FlagValueSource { var storage: [String: Any] init (_ dictionary: [String: Any] = [:]) { self.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>http://unsignedapps.github.io/Vexil/guides/readme/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/readme/</guid>
      <description>You can find additional Vexil documentation in this folder. A summary of each document is below.
   Document Description     Quick Start and Installation Back in the repository root, the README provides a quick overview, some examples and installation instructions.   Creating Custom Flag Value Sources How to create your own custom FlagValueSource. See also Working with Flag Value Sources.   Defining Flags A deep dive into defining your flag hierarchy and the supported flag types and options.</description>
    </item>
    
    <item>
      <title>Flag Keys</title>
      <link>http://unsignedapps.github.io/Vexil/guides/flag-keys/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/flag-keys/</guid>
      <description>Lets be honest, any Feature Flag or Feature Toggle platform is just a glorified Key-Value store, and all Vexil does is map string-based keys into a strongly-typed hierarchy and provide a (hopefully) nice developer experience.
It&amp;rsquo;s very important then when working with different FlagValueSources that you know how Vexil maps the FlagContainer, FlagGroup and Flags into something that can work with any key-value store.
If you&amp;rsquo;d prefer to read this guide in code format check out KeyEncodingTests.</description>
    </item>
    
    <item>
      <title>Snapshots</title>
      <link>http://unsignedapps.github.io/Vexil/guides/snapshots/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/snapshots/</guid>
      <description>Snapshots are one of the most verisitile features of Vexil. They are used to support real-time flag monitoring using Combine and provide the primary source of mutability to a FlagPole.
Subscribing to flag changes A key part of declerative programming is the ability to react to changes over time. Vexil supports this by declaring a Publisher that will deliver a Snapshot of the FlagPole any time one of its values changes.</description>
    </item>
    
    <item>
      <title>Working with Flag Value Sources</title>
      <link>http://unsignedapps.github.io/Vexil/guides/sources/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/sources/</guid>
      <description>The Vexil FlagPole supports multiple backend flag sources, and ships with the following sources built-in:
   Name Description     UserDefaults Any UserDefaults instance automatically conforms to FlagValueSource   Snapshot All snapshots taken of a FlagPole can be used as a source.    Initialisation When initialising a FlagPole, it will default to a single source: UserDefaults.standard.
You can always be explicit if you want to use a different set of sources:</description>
    </item>
    
    <item>
      <title>Defining Flags</title>
      <link>http://unsignedapps.github.io/Vexil/guides/defining-flags/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/defining-flags/</guid>
      <description>In Vexil, the definition of flags follows a similar pattern to Swift Argument Parser.
Vexil supports a tree of flags, so we need a structure to hold them:
import Vexil struct LoginFlags: FlagContainer { @Flag(&amp;#34;Enables the forgot password button on the login screen and associated flows&amp;#34;) var forgotPassword: Bool } Side Note: Vexil requires descriptions for all of its flags and flag groups. This is used by Vexillographer for providing context for the flags you are enabling/disabling in the UI, but it also provides context for future developers (especially yourself in 12 months time) as to what flags mean and what their intended use is.</description>
    </item>
    
    <item>
      <title>Vexillographer</title>
      <link>http://unsignedapps.github.io/Vexil/guides/vexillographer/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/guides/vexillographer/</guid>
      <description>The second library product of Vexil is Vexillographer, a small SwiftUI tool for displaying and manipulating flags.
Usage You include it in your project somewhere and initialise it with a FlagPole and FlagValueSource:
import Vexillographer struct MyView: View { let flagPole = FlagPole(hoist: AppFlags.swift) var body: some View { NavigationView { Form { Vexillographer(flagPole: flagPole, source: UserDefaults.standard) } } } } Vexillographer will then display a that lists all of your Flags and FlagGroups, allowing you to drill down your configured flags and edit their values directly.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/assertnothrowfileline_/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/assertnothrowfileline_/</guid>
      <description>AssertNoThrow(file:​line:​_:​) public func AssertNoThrow(file:​ StaticString = #file, line:​ UInt = #line, _ expression:​ () throws -&amp;gt; Void) </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/assertthrowserrorfileline_/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/assertthrowserrorfileline_/</guid>
      <description>AssertThrows(error:​file:​line:​_:​) public func AssertThrows&amp;lt;E&amp;gt;(error:​ E, file:​ StaticString = #file, line:​ UInt = #line, _ expression:​ () throws -&amp;gt; Void) where E:​ Equatable </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/assertthrowsfileline_/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/assertthrowsfileline_/</guid>
      <description>AssertThrows(file:​line:​_:​) @discardableResult public func AssertThrows(file:​ StaticString = #file, line:​ UInt = #line, _ expression:​ () throws -&amp;gt; Void) -&amp;gt; Swift.Error? </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/boxedflagvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/boxedflagvalue/</guid>
      <description>BoxedFlagValue An intermediate type used to make encoding and decoding of types simpler for FlagValueSources
public enum BoxedFlagValue Any custom type you conform to FlagValue must be able to be represented using one of these types
Inheritance Equatable
Enumeration Cases array case array(:​ [BoxedFlagValue]) bool case bool(:​ Bool) dictionary case dictionary(:​ [String:​ BoxedFlagValue]) data case data(:​ Data) double case double(:​ Double) float case float(:​ Float) integer case integer(:​ Int) none case none string case string(:​ String) </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flag/</guid>
      <description>Flag A wrapper representing a Feature Flag / Feature Toggle.
@propertyWrapper public struct Flag&amp;lt;Value&amp;gt;:​ Decorated, Identifiable where Value:​ FlagValue All Flags must be initialised with a default value and a description. The default value is used when none of the sources on the FlagPole have a value specified for this flag. The description is used for future developer reference and in Vexlliographer to describe the flag.
The type that you wrap with @Flag must conform to FlagValue.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flag_codingkeystrategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flag_codingkeystrategy/</guid>
      <description>Flag.CodingKeyStrategy An enumeration describing how the key should be calculated for this specific Flag.
enum CodingKeyStrategy Enumeration Cases `default` Follow the default behaviour applied to the FlagPole
case `default` kebabcase Converts the property name into a kebab-case string. e.g. myPropertyName becomes my-property-name
case kebabcase snakecase Converts the property name into a snake_case string. e.g. myPropertyName becomes my_property_name
case snakecase customKey Manually specifies the key name for this Flag.
case customKey(:​ String) This is combined with the keys from the parent groups to create the final key.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagcontainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagcontainer/</guid>
      <description>FlagContainer A FlagContainer is a type that encapsulates your Flag and FlagGroup types. The only requirement of a FlagContainer is that it can be initialised with an empty init().
public protocol FlagContainer </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagdisplayvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagdisplayvalue/</guid>
      <description>FlagDisplayValue A convenience protocol used by flag editors like Vexillographer.
public protocol FlagDisplayValue Use this with your CaseIterable types when you want to customise the value displayed in the UI.
  Requirements flagDisplayValue The value to display in the Picker for a given flag value
var flagDisplayValue:​ String </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flaggroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flaggroup/</guid>
      <description>FlagGroup A wrapper representing a group of Feature Flags / Feature Toggles.
@propertyWrapper public struct FlagGroup&amp;lt;Group&amp;gt;:​ Decorated, Identifiable where Group:​ FlagContainer Use this to structure your flags into a tree. You can nest FlagGroups as deep as you need to and can split them across multiple files for maintainability.
The type that you wrap with FlagGroup must conform to FlagContainer.
Inheritance Decorated, Identifiable
Initializers init(name:​codingKeyStrategy:​description:​) Initialises a new FlagGroup with the supplied info</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flaggroup_codingkeystrategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flaggroup_codingkeystrategy/</guid>
      <description>FlagGroup.CodingKeyStrategy An enumeration describing how the key should be calculated for this specific FlagGroup.
enum CodingKeyStrategy Enumeration Cases `default` Follow the default behaviour applied to the FlagPole
case `default` kebabcase Converts the property name into a kebab-case string. e.g. myPropertyName becomes my-property-name
case kebabcase snakecase Converts the property name into a snake_case string. e.g. myPropertyName becomes my_property_name
case snakecase skip Skips this FlagGroup from the key generation
case skip customKey Manually specifies the key name for this FlagGroup.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flaginfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flaginfo/</guid>
      <description>FlagInfo A simple collection of information about a Flag or FlagGroup
public struct FlagInfo This is mostly used by flag editors like Vexillographer.
Inheritance ExpressibleByStringLiteral
Initializers init(description:​) Allows a FlagInfo to be initialised directly when required
public init(description:​ String) Parameters  description:​ - description:​ A brief description of the Flag or FlagGroups purpose.  init(stringLiteral:​) public init(stringLiteral value:​ String) Properties name The name of the flag or flag group, if nil it is calculated from the containing property name</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagpole/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagpole/</guid>
      <description>FlagPole A FlagPole hoists a group of feature flags / feature toggles.
@dynamicMemberLookup public class FlagPole&amp;lt;RootGroup&amp;gt; where RootGroup:​ FlagContainer It provides the primary mechanism for dynamically accessing Flags, looking them up from multiple sources. It also provides methods for taking and interaction with Snapshots of flags.
Each FlagPole must be initalised with the type of a FlagContainer:​
struct MyFlags:​ FlagContainer { // ... } let flagPpole = FlagPole(hoist:​ MyFlags.self) You can then interact with the FlagPole using dynamic member lookup:​</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagvalue/</guid>
      <description>FlagValue A type that represents the wrapped value of a Flag
public protocol FlagValue This type exists solely so we can provide hints for boxing/unboxing or encoding/decoding into various FlagValueSources.
See the full documentation for information and examples on using custom types with Vexil.
Requirements boxedFlagValue Your conforming type must return an instance of the BoxedFlagValue with the boxed type included. This type should match the type specified in the BoxedValueType assocaited type.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagvaluedictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagvaluedictionary/</guid>
      <description>FlagValueDictionary A simple dictionary-backed FlagValueSource that can be useful for testing and other purposes.
open class FlagValueDictionary:​ Identifiable, ExpressibleByDictionaryLiteral Inheritance Collection, ExpressibleByDictionaryLiteral, FlagValueSource, Identifiable
Nested Type Aliases DictionaryType public typealias DictionaryType = [String:​ Any] Index public typealias Index = DictionaryType.Index Element public typealias Element = DictionaryType.Element Initializers init(_:​) Initialises a FlagValueDictionary with the specified dictionary
public init(_ dictionary:​ DictionaryType = [:​]) init(dictionaryLiteral:​) public required init(dictionaryLiteral elements:​ (String, Any)) Properties id let id name var name:​ String valuesDidChange If you&amp;rsquo;re running on a platform that supports Combine you can optionally support real-time flag updates</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/flagvaluesource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/flagvaluesource/</guid>
      <description>FlagValueSource A simple protocol that describes a source of FlagValues
public protocol FlagValueSource For more information and examples on creating custom FlagValueSources please see the full documentation.
Requirements name The name of the source. Used by flag editors like Vexillographer
var name:​ String flagValue(key:​) Provide a way to fetch values
func flagValue&amp;lt;Value&amp;gt;(key:​ String) -&amp;gt; Value? where Value:​ FlagValue setFlagValue(_:​key:​) And to save values – if your source does not support saving just do nothing</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/home/</guid>
      <description>Types  VexilConfiguration:​ A configuration struct passed into the FlagPole to configure it. VexilConfiguration.CodingKeyStrategy:​ An enumeration describing how keys should be calculated by Flag and FlagGroups. FlagGroup.CodingKeyStrategy:​ An enumeration describing how the key should be calculated for this specific FlagGroup. Flag.CodingKeyStrategy:​ An enumeration describing how the key should be calculated for this specific Flag. Flag:​ A wrapper representing a Feature Flag / Feature Toggle. FlagInfo:​ A simple collection of information about a Flag or FlagGroup FlagGroup:​ A wrapper representing a group of Feature Flags / Feature Toggles.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/mutableflaggroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/mutableflaggroup/</guid>
      <description>MutableFlagGroup A MutableFlagGroup is a wrapper type that provides a &amp;ldquo;setter&amp;rdquo; for each contained Flag.
@dynamicMemberLookup public class MutableFlagGroup&amp;lt;Group, Root&amp;gt; where Group:​ FlagContainer, Root:​ FlagContainer </description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/snapshot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/snapshot/</guid>
      <description>Snapshot A Snapshot serves multiple purposes in Vexil. It is a point-in-time container of flag values, and is also mutable and can be applied / saved to a FlagValueSource.
@dynamicMemberLookup public class Snapshot&amp;lt;RootGroup&amp;gt;:​ FlagValueSource where RootGroup:​ FlagContainer Snapshots are themselves a FlagValueSource, which means you can insert in into a FlagPoles source hierarchy as required.,
You create snapshots using a FlagPole:​
// Create an empty Snapshot. It contains no values itself so any flags // accessed in it will use their `defaultValue`.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/vexilconfiguration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/vexilconfiguration/</guid>
      <description>VexilConfiguration A configuration struct passed into the FlagPole to configure it.
public struct VexilConfiguration Initializers init(codingPathStrategy:​prefix:​separator:​) Initialises a new VexilConfiguration struct with the supplied info.
public init(codingPathStrategy:​ VexilConfiguration.CodingKeyStrategy = .default, prefix:​ String? = nil, separator:​ String = &amp;#34;.&amp;#34;) Parameters  codingPathStrategy:​ - codingPathStrategy:​ How to calculate each Flags &amp;ldquo;key&amp;rdquo;. Defaults to CodingKeyStrategy.default (aka .kebabcase) prefix:​ - prefix:​ An optional prefix to apply to each calculated key,. This is treated as a separate &amp;ldquo;level&amp;rdquo; of the tree.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/vexilconfiguration_codingkeystrategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/vexilconfiguration_codingkeystrategy/</guid>
      <description>VexilConfiguration.CodingKeyStrategy An enumeration describing how keys should be calculated by Flag and FlagGroups.
enum CodingKeyStrategy Each Flag and FlagGroup can specify its own behaviour. This is the default behaviour to use when they don&amp;rsquo;t.
Enumeration Cases `default` Follow the default behaviour. This is basically a synonym for .kebabcase
case `default` kebabcase Converts the property name into a kebab-case string. e.g. myPropertyName becomes my-property-name
case kebabcase snakecase Converts the property name into a snake_case string.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://unsignedapps.github.io/Vexil/api/vexillographer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://unsignedapps.github.io/Vexil/api/vexillographer/</guid>
      <description>Vexillographer public struct Vexillographer&amp;lt;RootGroup&amp;gt;:​ View where RootGroup:​ FlagContainer Inheritance View
Initializers init(flagPole:​source:​) public init(flagPole:​ FlagPole&amp;lt;RootGroup&amp;gt;, source:​ FlagValueSource) Properties body var body:​ some View </description>
    </item>
    
  </channel>
</rss>